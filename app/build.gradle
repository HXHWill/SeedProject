apply plugin: 'com.android.application'

def globalConfiguration = rootProject.ext
def APP_VERSION = "1.0.0"
def APP_VERSION_CODE = 1

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    signingConfigs {
        release {
            storeFile file("../seed.jks")
            storePassword project.hasProperty("KEYSTORE_PASS") ? KEYSTORE_PASS : System.getenv("KEYSTORE_PASS")
            keyAlias project.hasProperty("ALIAS_NAME") ? ALIAS_NAME : System.getenv("ALIAS_NAME")
            keyPassword project.hasProperty("ALIAS_PASS") ? ALIAS_PASS : System.getenv("ALIAS_PASS")
            v2SigningEnabled = false
        }
    }

    compileSdkVersion globalConfiguration.android.compileSdkVersion
    buildToolsVersion globalConfiguration.android.buildToolsVersion

    defaultConfig {
        minSdkVersion globalConfiguration.android.minSdkVersion
        targetSdkVersion globalConfiguration.android.targetSdkVersion
        applicationId globalConfiguration.android.applicationId
        versionCode APP_VERSION_CODE
        versionName APP_VERSION

        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'x86'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$rootDir/config/proguard-rules.pro"

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "${variant.flavorName}_v${defaultConfig.versionName}_${releaseTime()}_${variant.buildType.name}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }

        debug {
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "${variant.flavorName}_v${defaultConfig.versionName}_${releaseTime()}_${variant.buildType.name}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    productFlavors {
        googlepaly {}
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [APP_CHANNEL: name]
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

//    project.ext.dependenciesMethod delegate, rootProject.ext.appDps

    compile rootProject.ext.dependencies["support-v4"]
    compile rootProject.ext.dependencies["support-appcompat-v7"]
    compile rootProject.ext.dependencies["utilcode"]
    compile rootProject.ext.dependencies["statusbarutil"]
    compile rootProject.ext.dependencies["SeedFramework"]
}
